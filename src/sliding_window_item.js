// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Uberbox.SlidingWindowItem = (function(_super) {
    __extends(SlidingWindowItem, _super);

    function SlidingWindowItem() {
      this.onClicked = __bind(this.onClicked, this);
      return SlidingWindowItem.__super__.constructor.apply(this, arguments);
    }

    SlidingWindowItem.prototype.loaded = false;

    SlidingWindowItem.prototype.events = function() {
      return {
        click: 'onClicked'
      };
    };

    SlidingWindowItem.prototype.modelEvents = {
      activate: 'onItemActivated',
      deactivate: 'onItemDeactivated'
    };

    SlidingWindowItem.prototype.belongs = function() {
      return this.top > 0 && this.left > 0 && this.width + this.left < this.getParent().width() && this.top + this.height < this.getParent().height();
    };

    SlidingWindowItem.prototype.initialize = function() {
      SlidingWindowItem.__super__.initialize.apply(this, arguments);
      this.listenToOnce(this, 'load', (function(_this) {
        return function() {
          _this.loaded = true;
          _this.$el.addClass('uberbox-loaded');
          if (_this.loaderTimeout) {
            clearTimeout(_this.loaderTimeout);
          }
          return _this.hideLoader();
        };
      })(this));
      this.render();
      this.bindUIElements();
      if (this.showRegions) {
        return this.showRegions();
      }
    };

    SlidingWindowItem.prototype.getTemplate = function() {
      return this.getOption('template')();
    };

    SlidingWindowItem.prototype.getNextToScrollTo = function(item) {
      var next;
      if (this.model === item) {
        return this;
      }
      if (next = this.getOption('next')) {
        return next.getNextToScrollTo(item);
      }
      return null;
    };

    SlidingWindowItem.prototype.getPrevToScrollTo = function(item) {
      var next;
      if (this.model === item) {
        return this;
      }
      if (next = this.getOption('prev')) {
        return next.getPrevToScrollTo(item);
      }
      return null;
    };

    SlidingWindowItem.prototype.runAction = function(callback) {
      if (this.loaded) {
        return callback();
      } else {
        this.loaderTimeout = setTimeout(this.showLoader, 200);
        return this.listenToOnce(this, 'load', (function(_this) {
          return function() {
            return setTimeout(callback, 200);
          };
        })(this));
      }
    };

    SlidingWindowItem.prototype.getParent = function() {
      if (!this.parent) {
        this.parent = this.$el.parent();
      }
      return this.parent;
    };

    SlidingWindowItem.prototype.remove = function() {
      this.$el.removeClass('uberbox-visible');
      if (this.getOption('next')) {
        this.getOption('next').options.prev = null;
      }
      if (this.getOption('prev')) {
        this.getOption('prev').options.next = null;
      }
      return setTimeout(((function(_this) {
        return function() {
          return SlidingWindowItem.__super__.remove.call(_this);
        };
      })(this)), 600);
    };

    SlidingWindowItem.prototype.reveal = function() {
      return _.defer((function(_this) {
        return function() {
          return _this.$el.addClass('uberbox-visible');
        };
      })(this));
    };

    SlidingWindowItem.prototype.bindUIElements = function() {
      SlidingWindowItem.__super__.bindUIElements.apply(this, arguments);
      if (this.model.collection.activeItem === this.model) {
        return this.onItemActivated();
      }
    };

    SlidingWindowItem.prototype.onItemActivated = function() {
      return this.$el.addClass('uberbox-current');
    };

    SlidingWindowItem.prototype.onItemDeactivated = function() {
      return this.$el.removeClass('uberbox-current');
    };

    SlidingWindowItem.prototype.onClicked = function() {
      return this.model.activate();
    };

    return SlidingWindowItem;

  })(Marionette.LayoutView);

}).call(this);
