// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Uberbox.LightboxItem = (function(_super) {
    __extends(LightboxItem, _super);

    function LightboxItem() {
      this.layout = __bind(this.layout, this);
      return LightboxItem.__super__.constructor.apply(this, arguments);
    }

    LightboxItem.prototype.defaults = {
      description: {
        position: 'right'
      }
    };

    LightboxItem.prototype.template = function() {
      return Uberbox.Templates['lightbox-item'];
    };

    LightboxItem.prototype.className = 'uberbox-lightbox-item';

    LightboxItem.prototype.regions = {
      object: '.uberbox-item-object',
      description: '.uberbox-item-description'
    };

    LightboxItem.prototype.ui = {
      content: '> .uberbox-lightbox-item-content',
      descriptionContent: '.uberbox-description-content',
      shareWrapper: '.uberbox-share'
    };

    LightboxItem.prototype.padding = 20;

    LightboxItem.prototype.initialize = function() {
      LightboxItem.__super__.initialize.apply(this, arguments);
      return this.once('load', (function(_this) {
        return function() {
          return _.defer(function() {
            _this.layout();
            return _.defer(function() {
              return _this.$el.addClass('uberbox-visible');
            });
          });
        };
      })(this));
    };

    LightboxItem.prototype.serializeData = function() {
      return {
        model: this.model
      };
    };

    LightboxItem.prototype.layout = function() {
      var availableAreaAspectRatio, availableAreaWidth, availableRatio, height, item, objectAspectRatio, objectRatio, objectView, width;
      if (this.waitForLoad && !this.loaded) {
        return;
      }
      width = this.$el.width();
      height = this.$el.height();
      if (width === 0 || height === 0) {
        return;
      }
      if (this.description.currentView && this.model.get('description_style') === 'right') {
        objectAspectRatio = this.object.currentView.getObjectNaturalAspectRatio();
        availableAreaWidth = width - this.description.currentView.$el.width();
        availableAreaAspectRatio = availableAreaWidth / height;
        if (objectAspectRatio > availableAreaAspectRatio && this.object.currentView.supportsOversizing) {
          this.$el.parent().css('margin-left', '');
          return this.fitOversized();
        } else if (objectAspectRatio > availableAreaAspectRatio) {
          this.fitWidth();
          return this.$el.parent().css('margin-left', -(this.$el.parent().width() - this.description.currentView.$el.width() - this.object.currentView.$el.width()) / 4);
        } else {
          this.$el.parent().css('margin-left', '');
          return this.fitHeight();
        }
      } else if (this.model.get('description_style') === 'mini') {
        item = this.$el.closest('.uberbox-lightbox-item');
        objectView = this.object.currentView;
        this.$el.css('margin-left', '');
        if (objectView.getObjectNaturalWidth() < width && objectView.getObjectNaturalHeight() < height) {
          return this.fitNaturally();
        } else {
          availableRatio = item.width() / (item.height() - (this.description.currentView ? this.description.$el.outerHeight() : 0));
          objectRatio = objectView.getObjectNaturalAspectRatio();
          if (availableRatio > objectRatio) {
            return this.fitHeight();
          } else {
            return this.fitWidth();
          }
        }
      }
    };

    LightboxItem.prototype.fitHeight = function() {
      return this.$el.addClass('uberbox-fit-height').removeClass('uberbox-fit-width uberbox-natural-fit uberbox-fit-oversized uberbox-fit-height-oversized uberbox-fit-width-oversized');
    };

    LightboxItem.prototype.fitWidth = function() {
      this.$el.addClass('uberbox-fit-width').removeClass('uberbox-fit-height uberbox-natural-fit uberbox-fit-oversized uberbox-fit-height-oversized uberbox-fit-width-oversized');
      return this.ui.content.css('margin-left', '');
    };

    LightboxItem.prototype.fitNaturally = function() {
      this.$el.removeClass('uberbox-fit-width uberbox-fit-height uberbox-natural-fit uberbox-fit-height-oversized uberbox-fit-width-oversized uberbox-fit-oversized').addClass('uberbox-natural-fit');
      return this.ui.content.css('margin-left', '');
    };

    LightboxItem.prototype.fitOversized = function() {
      this.$el.addClass('uberbox-fit-oversized').removeClass('uberbox-fit-width uberbox-fit-height');
      this.ui.content.css('margin-left', '');
      if (this.object.currentView.getObjectNaturalAspectRatio() > this.object.currentView.getAspectRatio()) {
        return this.$el.addClass('uberbox-fit-height-oversized').removeClass('uberbox-fit-width-oversized');
      } else {
        return this.$el.addClass('uberbox-fit-width-oversized').removeClass('uberbox-fit-height-oversized');
      }
    };

    LightboxItem.prototype.hideLoader = function() {};

    LightboxItem.prototype.showLoader = function() {};

    LightboxItem.prototype.showRegions = function() {
      var type;
      type = Uberbox.getObjectViewType(this.model);
      if (this.model.get('description')) {
        this.$el.addClass('uberbox-has-description');
        this.$el.addClass("uberbox-description-" + (this.model.get('description_style')));
      }
      this.object.show(new type(_.extend(this.options, {
        model: this.model
      })));
      if (this.object.currentView.waitForLoad) {
        this.showLoader();
        return this.listenToOnce(this.object.currentView, 'load', (function(_this) {
          return function() {
            _this.trigger('load');
            return _this.hideLoader();
          };
        })(this));
      } else {
        return this.trigger('load');
      }
    };

    LightboxItem.prototype.layoutAsCurrent = function() {
      this.$el.css({
        transform: ''
      });
      return this.layout();
    };

    LightboxItem.prototype.remove = function() {
      if (this.model.isNext()) {
        this.$el.addClass('uberbox-flyout-next');
      }
      if (this.model.isPrev()) {
        this.$el.addClass('uberbox-flyout-prev');
      }
      if (this.getOption('next')) {
        this.getOption('next').options.prev = null;
      }
      if (this.getOption('prev')) {
        this.getOption('prev').options.next = null;
      }
      return setTimeout(((function(_this) {
        return function() {
          return LightboxItem.__super__.remove.call(_this);
        };
      })(this)), 600);
    };

    return LightboxItem;

  })(Uberbox.SlidingWindowItem);

  Uberbox.DownloadView = (function(_super) {
    __extends(DownloadView, _super);

    function DownloadView() {
      return DownloadView.__super__.constructor.apply(this, arguments);
    }

    DownloadView.prototype.template = '#uberbox-template-download';

    return DownloadView;

  })(Marionette.ItemView);

  Uberbox.VerticalLightboxItem = (function(_super) {
    __extends(VerticalLightboxItem, _super);

    function VerticalLightboxItem() {
      return VerticalLightboxItem.__super__.constructor.apply(this, arguments);
    }

    VerticalLightboxItem.prototype.layoutAsNext = function() {
      this.$el.css({
        transform: "translate(0, " + (jQuery(window).height()) + "px)"
      });
      return this.layout();
    };

    VerticalLightboxItem.prototype.layoutAsPrev = function() {
      this.$el.css({
        transform: "translate(0, -" + (jQuery(window).height()) + "px)"
      });
      return this.layout();
    };

    return VerticalLightboxItem;

  })(Uberbox.LightboxItem);

  Uberbox.HorizontalLightboxItem = (function(_super) {
    __extends(HorizontalLightboxItem, _super);

    function HorizontalLightboxItem() {
      return HorizontalLightboxItem.__super__.constructor.apply(this, arguments);
    }

    HorizontalLightboxItem.prototype.layoutAsNext = function() {
      this.$el.css({
        transform: 'translate(120%, 0)'
      });
      return this.layout();
    };

    HorizontalLightboxItem.prototype.layoutAsPrev = function() {
      this.$el.css({
        transform: 'translate(-120%, 0)'
      });
      return this.layout();
    };

    return HorizontalLightboxItem;

  })(Uberbox.LightboxItem);

  Uberbox.Lightbox = (function(_super) {
    __extends(Lightbox, _super);

    function Lightbox() {
      this.layout = __bind(this.layout, this);
      return Lightbox.__super__.constructor.apply(this, arguments);
    }

    Lightbox.prototype.defaults = function() {
      return _.extend(Lightbox.__super__.defaults.apply(this, arguments), {
        toolbar: true
      });
    };

    Lightbox.prototype.className = 'uberbox-lightbox-content';

    Lightbox.prototype.template = function() {
      return Uberbox.Templates['lightbox-content'];
    };

    Lightbox.prototype.ui = {
      next: '.uberbox-next',
      prev: '.uberbox-prev',
      toolbarWrapper: '.uberbox-toolbar-wrapper'
    };

    Lightbox.prototype.events = {
      'click @ui.next': (function() {
        if (!this.ui.next.is('.uberbox-disabled')) {
          return this.currentItemView.model.next().activate();
        }
      }),
      'click @ui.prev': (function() {
        if (!this.ui.prev.is('.uberbox-disabled')) {
          return this.currentItemView.model.prev().activate();
        }
      }),
      'click @ui.close': function() {
        return this.trigger('close');
      }
    };

    Lightbox.prototype.getChildViewClass = function() {
      if (this.getOption('orientation') === 'horizontal') {
        return Uberbox.HorizontalLightboxItem;
      } else {
        return Uberbox.VerticalLightboxItem;
      }
    };

    Lightbox.prototype.onShow = function() {
      Lightbox.__super__.onShow.apply(this, arguments);
      this.render();
      return this.bindUIElements();
    };

    Lightbox.prototype.render = function() {
      return this.$el.html(Marionette.Renderer.render(this.template));
    };

    Lightbox.prototype.showToolbar = function() {
      if (this.toolbar) {
        this.toolbar.remove();
      }
      return this.toolbar = new Uberbox.ToolbarView({
        el: this.ui.toolbarWrapper,
        model: this.collection.activeItem
      });
    };

    Lightbox.prototype.onItemActivated = function(item) {
      if (this.getOption('toolbar')) {
        this.showToolbar();
      }
      if (!this.currentItemView) {
        this.rebuild();
      } else {
        if (item === this.currentItemView.model.next()) {
          this.scrollNext();
        } else if (item === this.currentItemView.model.prev()) {
          this.scrollPrev();
        } else {
          this.rebuild();
        }
      }
      if (this.currentItemView.model.next()) {
        this.ui.next.removeClass('uberbox-disabled');
      } else {
        this.ui.next.addClass('uberbox-disabled');
      }
      if (this.currentItemView.model.prev()) {
        return this.ui.prev.removeClass('uberbox-disabled');
      } else {
        return this.ui.prev.addClass('uberbox-disabled');
      }
    };

    Lightbox.prototype.checkPrevNext = function() {};

    Lightbox.prototype.rebuild = function() {
      var next, prev;
      if (this.currentItemView) {
        this.currentItemView.remove();
      }
      if (this.prevItemView) {
        this.prevItemView.remove();
      }
      if (this.nextItemView) {
        this.nextItemView.remove();
      }
      this.currentItemView = this.createChildView(this.collection.activeItem);
      if (next = this.collection.activeItem.next()) {
        this.nextItemView = this.createChildView(next, {
          prev: this.currentItemView
        });
      }
      if (prev = this.collection.activeItem.prev()) {
        return this.prevItemView = this.createChildView(prev, {
          next: this.currentItemView
        });
      }
    };

    Lightbox.prototype.scrollNext = function() {
      if (this.prevItemView) {
        this.prevItemView.remove();
      }
      this.currentItemView.layoutAsPrev();
      this.prevItemView = this.currentItemView;
      this.nextItemView.layoutAsCurrent();
      this.currentItemView = this.nextItemView;
      if (this.nextItemView.model.next()) {
        return this.nextItemView = this.createChildView(this.nextItemView.model.next(), {
          prev: this.nextItemView
        });
      } else {
        return this.nextItemView = null;
      }
    };

    Lightbox.prototype.scrollPrev = function() {
      if (this.nextItemView) {
        this.nextItemView.remove();
      }
      this.currentItemView.layoutAsNext();
      this.nextItemView = this.currentItemView;
      this.prevItemView.layoutAsCurrent();
      this.currentItemView = this.prevItemView;
      if (this.prevItemView.model.prev()) {
        return this.prevItemView = this.createChildView(this.prevItemView.model.prev(), {
          next: this.prevItemView
        });
      } else {
        return this.prevItemView = null;
      }
    };

    Lightbox.prototype.layout = function() {
      this.currentItemView.layoutAsCurrent();
      if (this.nextItemView) {
        _.debounce(((function(_this) {
          return function() {
            return _this.nextItemView.layoutAsNext();
          };
        })(this)), 200);
      }
      if (this.prevItemView) {
        return _.debounce(((function(_this) {
          return function() {
            return _this.prevItemView.layoutAsPrev();
          };
        })(this)), 200);
      }
    };

    return Lightbox;

  })(Uberbox.SlidingWindow);

}).call(this);
