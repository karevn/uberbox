// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Uberbox.CarouselItem = (function(_super) {
    __extends(CarouselItem, _super);

    function CarouselItem() {
      this.onImageLoaded = __bind(this.onImageLoaded, this);
      return CarouselItem.__super__.constructor.apply(this, arguments);
    }

    CarouselItem.prototype.template = function() {
      return Uberbox.Templates['carousel-item'];
    };

    CarouselItem.prototype.className = 'uberbox-carousel-item';

    CarouselItem.prototype.padding = 15;

    CarouselItem.prototype.events = function() {
      return _.extend(CarouselItem.__super__.events.apply(this, arguments), {
        'load @ui.image': 'onImageLoaded'
      });
    };

    CarouselItem.prototype.ui = {
      image: 'img'
    };

    CarouselItem.prototype.getImageAspectRatio = function() {
      var aspect, image;
      image = this.ui.image[0];
      return aspect = image.naturalWidth / image.naturalHeight;
    };

    CarouselItem.prototype.getHeightInVerticalMode = function() {
      return this.width / this.getImageAspectRatio();
    };

    CarouselItem.prototype.getWidthInHorizontalMode = function() {
      return this.height * this.getImageAspectRatio();
    };

    CarouselItem.prototype.bindUIElements = function() {
      CarouselItem.__super__.bindUIElements.apply(this, arguments);
      if (this.ui.image[0].complete) {
        return _.defer((function(_this) {
          return function() {
            return _this.onImageLoaded();
          };
        })(this));
      }
    };

    CarouselItem.prototype.onImageLoaded = function() {
      return this.trigger('load');
    };

    CarouselItem.prototype.layoutContent = function() {};

    CarouselItem.prototype.hideLoader = function() {};

    CarouselItem.prototype.layoutAsCurrent = function() {
      this.calculateCoordinatesAsCurrent();
      if (this.loaded) {
        this.layoutContent();
      }
      return this.applyLayout();
    };

    CarouselItem.prototype.layoutAsNext = function() {
      this.calculateCoordinatesAsNext();
      if (this.loaded) {
        this.layoutContent();
      }
      return this.applyLayout();
    };

    CarouselItem.prototype.layoutAsPrev = function() {
      this.calculateCoordinatesAsPrev();
      if (this.loaded) {
        this.layoutContent();
      }
      return this.applyLayout();
    };

    CarouselItem.prototype.fits = function() {
      var offset;
      if (this.belongs()) {
        return true;
      }
      offset = this.$el.offset();
      if (this.top < this.getParent().height() && offset.top + this.$el.height() > 0 && offset.left - this.$el.offsetParent().offset().left < this.getParent().width() && offset.left - this.$el.offsetParent().offset().left + this.$el.width() > 0) {
        return true;
      }
      return false;
    };

    CarouselItem.prototype.applyLayout = function() {
      return this.$el.css({
        left: this.left,
        top: this.top,
        width: this.width,
        height: this.height
      });
    };

    return CarouselItem;

  })(Uberbox.SlidingWindowItem);

  Uberbox.VerticalCarouselItem = (function(_super) {
    __extends(VerticalCarouselItem, _super);

    function VerticalCarouselItem() {
      return VerticalCarouselItem.__super__.constructor.apply(this, arguments);
    }

    VerticalCarouselItem.prototype.calculateCoordinatesAsPrev = function() {
      var next;
      next = this.getOption('next');
      this.left = this.padding;
      this.width = this.getParent().width() - this.padding * 2;
      this.height = this.getHeightInVerticalMode();
      return this.top = next.top - this.padding - this.height;
    };

    VerticalCarouselItem.prototype.calculateCoordinatesAsNext = function() {
      var prev;
      prev = this.getOption('prev');
      this.left = this.padding;
      this.top = this.padding + prev.top + prev.height;
      this.width = this.getParent().width() - this.padding * 2;
      return this.height = this.getHeightInVerticalMode();
    };

    VerticalCarouselItem.prototype.calculateCoordinatesAsCurrent = function() {
      var top;
      this.width = this.getParent().width() - this.padding * 2;
      this.height = this.getHeightInVerticalMode();
      top = this.getParent().height() / 2 - this.height / 2;
      this.left = this.padding;
      return this.top = top;
    };

    return VerticalCarouselItem;

  })(Uberbox.CarouselItem);

  Uberbox.HorizontalCarouselItem = (function(_super) {
    __extends(HorizontalCarouselItem, _super);

    function HorizontalCarouselItem() {
      return HorizontalCarouselItem.__super__.constructor.apply(this, arguments);
    }

    HorizontalCarouselItem.prototype.calculateCoordinatesAsPrev = function() {
      var next;
      next = this.getOption('next');
      this.height = this.getParent().height() - this.padding * 2;
      this.width = this.getWidthInHorizontalMode();
      this.left = next.left - this.width - this.padding;
      return this.top = this.padding;
    };

    HorizontalCarouselItem.prototype.calculateCoordinatesAsNext = function() {
      var prev;
      prev = this.getOption('prev');
      this.left = prev.left + prev.width + this.padding;
      this.top = this.padding;
      this.height = this.getParent().height() - this.padding * 2;
      return this.width = this.getWidthInHorizontalMode();
    };

    HorizontalCarouselItem.prototype.calculateCoordinatesAsCurrent = function() {
      this.height = this.getParent().height() - this.padding * 2;
      this.width = this.getWidthInHorizontalMode();
      this.left = this.getParent().width() / 2 - this.width / 2;
      return this.top = this.padding;
    };

    return HorizontalCarouselItem;

  })(Uberbox.CarouselItem);

  Uberbox.Carousel = (function(_super) {
    __extends(Carousel, _super);

    function Carousel() {
      this.layout = __bind(this.layout, this);
      return Carousel.__super__.constructor.apply(this, arguments);
    }

    Carousel.prototype.className = 'uberbox-carousel-content';

    Carousel.prototype.template = function() {
      return Uberbox.Templates['carousel-content'];
    };

    Carousel.prototype.render = function() {
      return this.$el.html(Marionette.Renderer.render(this.template));
    };

    Carousel.prototype.getChildViewClass = function() {
      if (this.getOption('orientation') === 'vertical') {
        return Uberbox.VerticalCarouselItem;
      } else {
        return Uberbox.HorizontalCarouselItem;
      }
    };

    Carousel.prototype.layout = function() {
      var item, _results;
      this.currentItemView.layoutAsCurrent();
      item = this.currentItemView.getOption('next');
      while (item) {
        item.layoutAsNext();
        item = item.getOption('next');
      }
      item = this.currentItemView.getOption('prev');
      _results = [];
      while (item) {
        item.layoutAsPrev();
        _results.push(item = item.getOption('prev'));
      }
      return _results;
    };

    Carousel.prototype.buildFromScratch = function(item) {
      this.currentItemView = this.createChildView(item);
      this.currentItemView.layoutAsCurrent();
      this.currentItemView.reveal();
      return this.currentItemView.runAction((function(_this) {
        return function() {
          _this.layoutNextItems(_this.currentItemView);
          return _this.layoutPrevItems(_this.currentItemView);
        };
      })(this));
    };

    Carousel.prototype.slideTo = function(item) {
      return this.currentItemView.runAction((function(_this) {
        return function() {
          _this.currentItemView = item;
          return _this.layout();
        };
      })(this));
    };

    Carousel.prototype.layout = function() {
      this.currentItemView.layoutAsCurrent();
      return this.currentItemView.runAction((function(_this) {
        return function() {
          _this.layoutPrevItems(_this.currentItemView);
          return _this.layoutNextItems(_this.currentItemView);
        };
      })(this));
    };

    Carousel.prototype.layoutNextItems = function(prev) {
      var view;
      if (prev !== this.currentItemView) {
        prev.layoutAsNext();
        if (!prev.fits()) {
          prev.remove();
          return null;
        }
      }
      if (prev.model.next() && !prev.getOption('next') && prev.belongs()) {
        view = this.createChildView(prev.model.next(), {
          prev: prev
        });
        prev.options.next = view;
        view.options.prev = prev;
        view.layoutAsNext();
        view.reveal();
        return view.runAction((function(_this) {
          return function() {
            return _this.layoutNextItems(view);
          };
        })(this));
      } else if (prev.getOption('next')) {
        return this.layoutNextItems(prev.getOption('next'));
      }
    };

    Carousel.prototype.layoutPrevItems = function(next) {
      var view;
      if (next !== this.currentItemView) {
        next.layoutAsPrev();
        if (!next.fits()) {
          next.remove();
          return null;
        }
      }
      if (next.model.prev() && !next.getOption('prev') && next.belongs()) {
        view = this.createChildView(next.model.prev(), {
          next: next
        });
        next.options.prev = view;
        view.options.next = next;
        view.layoutAsPrev();
        view.reveal();
        return view.runAction((function(_this) {
          return function() {
            return _this.layoutPrevItems(view);
          };
        })(this));
      } else if (next.getOption('prev')) {
        return this.layoutPrevItems(next.getOption('prev'));
      }
    };

    Carousel.prototype.onItemActivated = function(item) {
      var next, prev;
      if (this.currentItemView && item === this.currentItemView.model) {
        return;
      }
      if (!this.currentItemView) {
        this.buildFromScratch(item);
        return;
      }
      if (next = this.currentItemView.getNextToScrollTo(item)) {
        return this.slideTo(next);
      } else if (prev = this.currentItemView.getPrevToScrollTo(item)) {
        return this.slideTo(prev);
      } else {
        this.currentItemView.remove();
        next = this.currentItemView.getOption('next');
        while (next) {
          next.remove();
          next = next.getOption('next');
        }
        prev = this.currentItemView.getOption('prev');
        while (prev) {
          prev.remove();
          prev = prev.getOption('prev');
        }
        return this.buildFromScratch(item);
      }
    };

    return Carousel;

  })(Uberbox.SlidingWindow);

}).call(this);
