// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Uberbox.SlidingWindow = (function(_super) {
    __extends(SlidingWindow, _super);

    SlidingWindow.prototype.defaults = function() {
      return {
        orientation: 'vertical',
        current: 0
      };
    };

    function SlidingWindow(options) {
      SlidingWindow.__super__.constructor.call(this, _.extend({}, _.result(this, 'defaults'), options));
      this.listenTo(this.collection, 'activate', this.onItemActivated);
    }

    SlidingWindow.prototype.onShow = function() {
      return jQuery(window).on('resize.uberbox', this.layout);
    };

    SlidingWindow.prototype.remove = function() {
      jQuery(window).off('resize.uberbox', this.layout);
      return SlidingWindow.__super__.remove.apply(this, arguments);
    };

    SlidingWindow.prototype.getChildView = function(child) {
      var childView;
      return childView = this.getOption('childView') || this.constructor;
    };

    SlidingWindow.prototype.createChildView = function(child, options) {
      var view, viewClass;
      if (options == null) {
        options = {};
      }
      viewClass = this.getChildViewClass();
      options = _.extend(_.extend({
        model: child,
        orientation: this.getOption('orientation')
      }, Marionette._getValue(this.getOption('childViewOptions'), this, [child])), options);
      view = new viewClass(options);
      if (options.prev) {
        view.$el.insertAfter(options.prev.$el);
        view.layoutAsNext();
      } else if (options.next) {
        view.$el.insertBefore(options.next.$el);
        view.layoutAsPrev();
      } else {
        view.$el.appendTo(this.$el);
        view.layoutAsCurrent();
      }
      return view;
    };

    return SlidingWindow;

  })(Marionette.View);

}).call(this);
